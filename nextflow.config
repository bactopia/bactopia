// main script name
manifest {
    author = 'Robert A. Petit III'
    name = 'bactopia'
    homePage = 'https://github.com/bactopia/bactopia'
    description = 'An extensive workflow for processing Illumina sequencing of bacterial genomes.'
    mainScript = 'main.nf'
    version = '3.1.1'
    nextflowVersion = '>=24.04.0'
}

import nextflow.util.SysHelper
import nextflow.util.MemoryUnit

// Includes
bactopia_cache = System.getenv("BACTOPIA_CACHEDIR") ? "${BACTOPIA_CACHEDIR}" : "${HOME}/.bactopia"
includeConfig "conf/params.config"
includeConfig "conf/workflows.config"
includeConfig "conf/base.config"
if (params.workflows.containsKey(params.wf)) {
    if (params.workflows[params.wf].containsKey("is_workflow")) {
        // Running as main workflow (e.g. bactopia/staphopia)
        includeConfig "conf/params/bactopia.config"

        params.workflows[params.wf]['includes'].each { it ->
            if (params.workflows[it].containsKey("modules")) {
                // Subworkflow which includes multiple modules
                params.workflows[it]['modules'].each { module ->
                    includeConfig "${params.workflows[module].path}/params.config"
                }
            } else {
                // Module
                includeConfig "${params.workflows[it].path}/params.config"
            }
        }

        if (params.containsKey("ask_merlin")) {
            if (params.ask_merlin) {
                params.workflows['merlin']['modules'].each { module -> 
                    includeConfig "${params.workflows[module].path}/params.config"
                }
            }
        }
        if (params.wf == "bactopia" || params.wf == "staphopia") {
            if (params.use_bakta) {
                params.workflows['bakta']['modules'].each { module -> 
                    includeConfig "${params.workflows[module].path}/params.config"
                }
            } else {
                includeConfig "${params.workflows['prokka'].path}/params.config"
            }
        }

        if (params.wf == "cleanyerreads") {
            includeConfig "conf/params/clean-yer-reads.config"
        } else if (params.wf == "teton") {
            includeConfig "conf/params/teton.config"
        } 
    } else {
        // Running as bactopia tool
        includeConfig "conf/params/bactopia-tools.config"
        if (params.workflows[params.wf].containsKey("use_local")) {
            includeConfig "conf/params/local/${params.workflows[params.wf].use_local}.config"
        }

        if (params.workflows[params.wf].containsKey("modules")) {
            // Subworkflow which includes multiple modules
            params.workflows[params.wf]['modules'].each { module ->
                includeConfig "${params.workflows[module].path}/params.config"
            }
        }
        if (params.workflows[params.wf].containsKey("path")) {
            // Module
            includeConfig "${params.workflows[params.wf].path}/params.config"
        }
    }
} else {
    // Include main bactopia params
    includeConfig "conf/params/bactopia.config"
}

if (params.is_ci) {
    includeConfig "conf/tests.config"
}
includeConfig "conf/outputs.config"

// Set up containers
singularity_cache = System.getenv("NXF_SINGULARITY_CACHEDIR") ? "${NXF_SINGULARITY_CACHEDIR}" : "${params.singularity_cache}"
run_timestamp = new java.util.Date().format('yyyyMMdd-HHmmss')
rundir = params.is_ci ? "${params.run_name}" : "${params.run_name}-${run_timestamp}"

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// NOTE: The following section will only be needed if a bactopia specific profile is added to nf-core/configs
// Load Bactopia custom profiles from different institutions.
//try {
//    includeConfig "${params.custom_config_base}/pipeline/bactopia.config"
//} catch (Exception e) {
//    System.err.println("WARNING: Could not load nf-core/config/bactopia profiles: ${params.custom_config_base}/pipeline/bactopia.config")
//}

includeConfig "conf/profiles.config"

if (params.nfconfig) {
    includeConfig check_path(params.nfconfig)
}

if (!params.help || !params.help || !params.list_wfs) {
    infodir = "${params.outdir}/bactopia-runs/${rundir}/nf-reports"

    // Reporting configuration
    timeline {
        enabled = true
        overwrite = true
        file = "${infodir}/${params.wf}-timeline.html"
    }

    report {
        enabled = true
        overwrite = true
        file = "${infodir}/${params.wf}-report.html"
    }

    trace {
        enabled = true
        overwrite = true
        file = "${infodir}/${params.wf}-trace.txt"
        fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem'
    }

    dag {
        enabled = true
        overwrite = true
        file = "${infodir}/${params.wf}-dag.svg"
    }
}


// Function to ensure that resource requirements don't go beyond a maximum limit
// Source: https://github.com/nf-core/rnaseq/blob/master/nextflow.config
resources = null
if (params.wf instanceof String) {
    resources = get_resources(this.conditionValues.profiles, params.max_memory, params.max_cpus)
}

params {
    resources = resources
    rundir = rundir
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(resources.max_memory as nextflow.util.MemoryUnit) == 1)
                return resources.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            System.err.println "   ### ERROR ###   Max memory '${resources.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            System.err.println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, resources.max_cpus as int )
        } catch (all) {
            System.err.println "   ### ERROR ###   Max cpus '${resources.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

def check_path(file_path) {
    // Try relative first
    launchDir = System.properties['user.dir']
    relative_path = "${launchDir}/${file_path}"
    File file_obj = new File(relative_path)
    if (file_obj.exists()) {
        return relative_path
    } else {
        // Try as absolute path
        file_obj = new File(file_path)
        if (file_obj.exists()) {
            return file_path
        } else {
            System.err.println "ERROR - Unable to locate '${params.nfconfig}' please check it exists"
        }
    }
}


def get_resources(profile, max_memory, max_cpus) {
    /* Adjust memory/cpu requests for standard profile only */
    def Map resources = [:]
    resources.max_memory = profile.any{ ['standard', 'docker', 'singularity'].contains(it) } ? _get_max_memory(max_memory).GB : max_memory
    resources.max_memory_int = resources.max_memory.toString().split(" ")[0]
    resources.max_memory_adjusted = resources.max_memory < max_memory
    resources.max_cpus = profile.any{ ['standard', 'docker', 'singularity'].contains(it) } ? _get_max_cpus(max_cpus.toInteger()) : max_cpus.toInteger()
    resources.max_cpus_adjusted = resources.max_cpus < max_cpus.toInteger()
    resources.max_cpus_75 = Math.round(resources.max_cpus * 0.75)
    resources.max_cpus_50 = Math.round(resources.max_cpus * 0.50)
    resources.max_cpus_1 = 1
    return resources
}


def _get_max_memory(requested) {
    /* Get the maximum available memory for the given system */
    def available = Math.floor(Double.parseDouble(SysHelper.getAvailMemory().toGiga().toString().split(" ")[0]) * 0.99).toInteger()
    requested = MemoryUnit.of(requested.toString()).toGiga().toString().split(" ")[0].toInteger()
    if (available < requested) {
        //System.err.println("WARNING: Maximum memory (${requested} GB) was adjusted to fit your system (${available} GB)")
        return available
    }

    return requested
}


def _get_max_cpus(requested) {
    /* Get the maximum available cpus for the given system */
    def available = SysHelper.getAvailCpus()
    if (available < requested) {
        //System.err.println("WARNING: Maximum CPUs (${requested}) was adjusted to fit your system (${available})")
        return available
    }

    return requested
}
